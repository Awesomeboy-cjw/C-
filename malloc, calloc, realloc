#include <cstdio>
#include <iostream>
using namespace std;

int main()
{
    /*pdf说malloc分配的空间值随机初始化，calloc分配的空间值初始化为0
      但测试都为0*/
      
    //博客说法
    /*
      malloc在内存的动态分配区域中分配一个长度为size的连续空间，如果分配成功，则返回所分配内存空间的首地址，否则返回NULL，申请的内存不会进行初始化。
      calloc申请内存空间后，会自动初始化内存空间为 0，但是malloc不会进行初始化，其内存空间存储的是一些随机数据
      动态分配一个长度为size的内存空间，并把内存空间的首地址赋值给ptr，把ptr内存空间调整为size。申请的内存空间不会进行初始化。
      
      New动态分配内存的运算符，自动计算需要分配的空间，在分配类类型的内存空间时，同时调用类的构造函数，对内存空间进行初始化，即完成类的初始化工作。
      动态分配内置类型是否自动初始化取决于变量定义的位置，在函数体外定义的变量都初始化为0，在函数体内定义的内置类型变量都不进行初始化。
     */
    const int nums = 20;
    cout<<"test malloc's init~\n";
    int *ptint = (int*)malloc(sizeof(int) * nums);
    for(int i=0; i<nums; ++i)
    {
        cout<<*ptint<<" ";
    }
    cout<<endl<<"now test calloc~\n";
    int *ptint2 = (int*)calloc(nums, sizeof(int));
    for(int i=0; i<nums; ++i)
    {
        cout<<*ptint2<<" ";
    }
    cout<<endl<<"now test relloc~\n";
    
    //relloc函数给动态分配的空间扩容
    int *ptint3 = (int*)realloc((void*)ptint, sizeof(int)*nums*2);
    for(int i=0; i<nums*2; ++i)
    {
        cout<<*ptint<<" ";
    }
    cout<<endl<<"end!\n";
    free(ptint2);
    free(ptint3);
    return 0;
}
